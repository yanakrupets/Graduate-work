@page "/dishes"
@using CafeApp.Data.Interfaces;
@using DIPLOM.Data.DB.Models;
@using Microsoft.EntityFrameworkCore;

<div class="row">
    <div class="col-lg-9">
        <h1>Dishes</h1>
    </div>
    <div class="col-lg-3 text-right">
        <a class="btn btn-success btn-sm" href="/dishes/create" role="button">Create New</a>
    </div>
</div>

@if (Dishes != null && Dishes.Count > 0)
{
    <table class="table table-bordered table-striped table-sm">
        <thead>
            <tr>
                <th>DishName</th>
                <th>Info</th>
                <th>Price</th>
                <th>DishImage</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Dishes)
            {
                <tr>
                    <td>@item.DishName</td>
                    <td>@item.Info</td>
                    <td>@item.Price</td>
                    <td><img src="@item.DishImage" /></td>
                    <td>@item.Category?.CategoryName</td>
                    <td class="text-right">
                        <a class="btn btn-primary btn-sm" href="/dishes/detail/@item.Id" role="button">Details</a>
                        <a class="btn btn-secondary btn-sm" href="/dishes/edit/@item.Id" role="button">Edit</a>
                        <button class="btn btn-danger btn-sm" @onclick="@(e => Delete(@item))" role="button">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [Inject]
    protected IUnitOfWork UnitOfWork { get; set; }

    public IRepository<Dish> Repository { get; set; }

    private List<Dish> Dishes { get; set; }

    [Inject]
    public NavigationManager NavigationManager { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Repository = UnitOfWork.GetRepository<Dish>();
        Dishes = await Repository.Get().ToListAsync();
    }

    private void Delete(Dish item)
    {
        Repository.Delete(item.Id);
        Dishes.RemoveAll(x => x.Id == item.Id);
    }
}